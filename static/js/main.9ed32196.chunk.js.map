{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","msg","Navbar","mode","href","title","Id","onClick","togglemode","htmlFor","TextForm","useState","text","setText","style","color","heading","backgroundColor","value","onChange","event","console","log","target","rows","newtext","toLocaleUpperCase","showAlert","toLocaleLowerCase","document","getElementById","select","navigator","clipboard","writeText","newText","split","join","length","App","setNavMode","setAlert","message","setTimeout","aboutText","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9ed32196.chunk.js","sourcesContent":[" import React from 'react'\r\n \r\n function Alert(props) {\r\n     return (\r\n       props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{props.alert.type}</strong> : {props.alert.msg} \r\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n         </div>\r\n     )\r\n }\r\n \r\n export default Alert\r\n ","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n  \r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" Id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n       \r\n        \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" Id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"></label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\nNavbar.propTypes= {title : PropTypes.string.isRequired,\r\n                    aboutText : PropTypes.string.isRequired}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"Enter your text here.\");\r\n    const handleUpClick =()=>{\r\n        console.log(\"Upper case was clicked.\" +text)\r\n        let newtext = text.toLocaleUpperCase();\r\n        setText(newtext);\r\n        props.showAlert(\"Converted to Uppercase!\",\"success\")\r\n    }\r\n    const handlelowClick =()=>{\r\n        console.log(\"Lower case was clicked.\" +text)\r\n        let newtext = text.toLocaleLowerCase();\r\n        setText(newtext);\r\n        props.showAlert(\"Converted to Lowercase!\",\"success\")\r\n    }\r\n    const handleCopy=()=>{\r\n        var text = document.getElementById(\"mybox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied on Clipboard!\",\"success\")\r\n    }\r\n    const handleextraSpace=()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\",\"success\")\r\n    }\r\n    \r\n    const handleclear =()=>{\r\n        console.log( text)\r\n        let newtext = '';\r\n        setText(newtext)\r\n        props.showAlert(\"Text is cleared!\",\"success\")\r\n    }\r\n    const handleOnChange =(event)=>{\r\n        console.log(\"onchnaged\")\r\n        setText(event.target.value)\r\n    }\r\n    return (\r\n        <>\r\n        <div className= \"container\" Id=\"mybox\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n           <h2 >{props.heading}</h2>\r\n           <div className=\"mb-3\">\r\n\r\n           <textarea className=\"form-control\" style={{backgroundColor: props.mode==='dark'?'grey':'white',color: props.mode==='dark'?'white':'black'}}  value={text} onChange={handleOnChange} Id=\"exampleFormControlTextarea1\" rows=\"8\"></textarea>\r\n    \r\n           </div> \r\n           <button className = \"btn.btn-primary\" onClick= {handleUpClick} >Convert to Uppercase</button> \r\n           <button className = \"btn.btn-primary mx-2\" onClick= {handlelowClick} >Convert to Lowercse</button> \r\n           <button className = \"btn.btn-primary mx-2\" onClick= {handleclear} >Clear text</button> \r\n           <button className = \"btn.btn-primary mx-2\" onClick= {handleCopy} >Copy Text</button> \r\n           \r\n           <button className = \"btn.btn-primary mx-2\" onClick= {handleextraSpace} >Remove spaces</button> \r\n           \r\n        </div>\r\n    \r\n        <div className=\"container my-2\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n         <h3>your text summary</h3>\r\n         <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n         <p> {0.008*text.split(\" \").length} time to read.</p>\r\n         <h3>Preview</h3>\r\n         <p>{text.length>0?text : \"Enter your text in above box to preview it here.\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","\nimport { useState } from 'react/cjs/react.development';\nimport './App.css';\nimport Alert from './components/Alert';\n\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n\nfunction App() {\n  const [mode, setNavMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert =(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type,\n      \n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2500);\n  }\n\n \n \n  const togglemode=()=>{\n    if(mode==='light'){\n      setNavMode('dark'); \n      document.body.style.backgroundColor ='#4c161d';\n      showAlert(\"Dark mode is enabled\",\"success\");\n    }\n    else{\n      setNavMode('light');\n      document.body.style.backgroundColor ='white';\n      showAlert(\"Light mode is enabled\",\"success\");\n    }\n  }\n  return (\n  <>\n    \n     <Navbar title = \"TextAnalizer\" aboutText= \"About Us\" mode ={mode} togglemode={togglemode}/>\n     <Alert alert={alert}/>\n    \n\n     <div className=\"container my-3\">\n       <TextForm  showAlert={showAlert} heading = \"Enter your text to analyze below.\" mode ={mode}  /> \n     </div>\n    \n\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}